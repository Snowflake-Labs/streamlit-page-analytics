# Copyright 2025 Snowflake Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Dependency Security workflow for vulnerability checks
name: "Dependency Security"

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run dependency checks every Monday at 2:00 AM UTC
    - cron: '0 2 * * 1'

jobs:
  safety-scan:
    name: Safety Dependency Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Cache pipenv virtualenv
        uses: actions/cache@v4
        id: pipenv-cache
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install project dependencies
        if: steps.pipenv-cache.outputs.cache-hit != 'true'
        run: |
          if [ -f Pipfile ]; then 
            pip install pipenv 
            pipenv install --dev
          elif [ -f requirements.txt ]; then 
            pip install -r requirements.txt
          fi

      # Check for known security vulnerabilities in dependencies using Safety GitHub Action
      - name: Run Safety scan
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
        continue-on-error: true

      - name: Save safety report to JSON
        run: echo "${{ steps.safety_scan.outputs.stdout }}" > safety-report.json

      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-security-report
          path: safety-report.json

  pip-audit:
    name: Pip Package Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Cache pipenv virtualenv
        uses: actions/cache@v4
        id: pipenv-cache
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install --user pip-audit

      - name: Install project dependencies
        if: steps.pipenv-cache.outputs.cache-hit != 'true'
        run: |
          if [ -f Pipfile ]; then 
            pip install pipenv 
            pipenv install --dev
          elif [ -f requirements.txt ]; then 
            pip install -r requirements.txt
          fi

      # Audit installed packages for known vulnerabilities
      - name: Run pip-audit
        run: |
          ~/.local/bin/pip-audit --format=json --output=pip-audit-report.json || true

      - name: Upload pip-audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pip-audit-report
          path: pip-audit-report.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [safety-scan, pip-audit]
    if: always()
    permissions:
      contents: read

    steps:
      - name: Download all security reports
        uses: actions/download-artifact@v5
        with:
          path: security-reports

      - name: Generate security summary
        run: |
          echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🛡️ Safety Scan Results" >> $GITHUB_STEP_SUMMARY
          if [ -f security-reports/safety-security-report/safety-report.json ]; then
            safety_issues=$(jq '.vulnerabilities | length' security-reports/safety-security-report/safety-report.json 2>/dev/null || echo "0")
            echo "- Found: $safety_issues potential vulnerabilities" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Safety scan completed (no JSON report generated)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY         
          
          echo "### 📋 Pip Audit Results" >> $GITHUB_STEP_SUMMARY
          if [ -f security-reports/pip-audit-report/pip-audit-report.json ]; then
            pip_audit_issues=$(jq '. | length' security-reports/pip-audit-report/pip-audit-report.json 2>/dev/null || echo "0")
            echo "- Found: $pip_audit_issues package vulnerabilities" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Pip audit completed (no JSON report generated)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Security reports uploaded as workflow artifacts**" >> $GITHUB_STEP_SUMMARY
