# Copyright 2025 Snowflake Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build and Release Distributions

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      upload_to_release:
        description: 'Upload to latest release (if available)'
        required: false
        default: false
        type: boolean

jobs:
  build-distributions:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python 3.10
      uses: actions/setup-python@v6
      with:
        python-version: '3.10'

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Cache uv
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Clean previous builds
      run: make clean

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Build all distributions
      run: make build-all

    - name: List built distributions
      run: |
        echo "Built distributions:"
        ls -la dist/

    - name: Upload distributions as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distributions
        path: dist/
        retention-days: 90

    - name: Get release info
      if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.upload_to_release == 'true')
      id: release
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "release_id=${{ github.event.release.id }}" >> $GITHUB_OUTPUT
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          # Get latest release for manual dispatch
          release_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          release_id=$(echo "$release_info" | jq -r '.id')
          tag_name=$(echo "$release_info" | jq -r '.tag_name')
          echo "release_id=$release_id" >> $GITHUB_OUTPUT
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
        fi

    - name: Upload to release
      if: steps.release.outputs.release_id != '' && steps.release.outputs.release_id != 'null'
      run: |
        # Find and upload all distribution files
        for file in dist/*; do
          if [ -f "$file" ]; then
            echo "Uploading $file to release..."
            gh release upload ${{ steps.release.outputs.tag_name }} "$file" --clobber
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      run: |
        echo "## ðŸŽ‰ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Successfully built the following distributions:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Format | File | Size |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|------|------|" >> $GITHUB_STEP_SUMMARY
        for file in dist/*; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            size=$(du -h "$file" | cut -f1)
            format=$(echo "$filename" | sed 's/.*\.//')
            echo "| $format | $filename | $size |" >> $GITHUB_STEP_SUMMARY
          fi
        done
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.release.outputs.release_id }}" != "" ] && [ "${{ steps.release.outputs.release_id }}" != "null" ]; then
          echo "âœ… Distributions uploaded to release ${{ steps.release.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "ðŸ“¦ Distributions available as workflow artifacts" >> $GITHUB_STEP_SUMMARY
        fi
